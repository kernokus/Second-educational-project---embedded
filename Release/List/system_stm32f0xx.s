///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM     22/Oct/2019  21:42:47 /
// Copyright 1999-2013 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  F:\ProjectsE\MCU\FiltTest_2\system_stm32f0xx.c          /
//    Command line =  F:\ProjectsE\MCU\FiltTest_2\system_stm32f0xx.c -D       /
//                    NDEBUG -D STM32F051 -D USE_STDPERIPH_DRIVER -lB         /
//                    F:\ProjectsE\MCU\FiltTest_2\Release\List\ -o            /
//                    F:\ProjectsE\MCU\FiltTest_2\Release\Obj\                /
//                    --endian=little --cpu=Cortex-M0 -e --fpu=None           /
//                    --dlib_config "F:\Program Files\IAR Systems\Embedded    /
//                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I        /
//                    F:\ProjectsE\MCU\FiltTest_2\ -I                         /
//                    F:\ProjectsE\MCU\FiltTest_2\STM32F0xx_StdPeriph_Lib_V1. /
//                    5.0\Libraries\CMSIS\Device\ST\STM32F0xx\Include\ -I     /
//                    F:\ProjectsE\MCU\FiltTest_2\STM32F0xx_StdPeriph_Lib_V1. /
//                    5.0\Libraries\CMSIS\Include\ -I                         /
//                    F:\ProjectsE\MCU\FiltTest_2\STM32F0xx_StdPeriph_Lib_V1. /
//                    5.0\Libraries\STM32F0xx_StdPeriph_Driver\inc\ -Oh       /
//    List file    =  F:\ProjectsE\MCU\FiltTest_2\Release\List\system_stm32f0 /
//                    xx.s                                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME system_stm32f0xx

        #define SHT_PROGBITS 0x1

        PUBLIC SystemInit

// F:\ProjectsE\MCU\FiltTest_2\system_stm32f0xx.c
//    1 /**
//    2   ******************************************************************************
//    3   * @file    system_stm32f0xx.c
//    4   * @author  MCD Application Team
//    5   * @version V1.4.0
//    6   * @date    05-December-2014
//    7   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
//    8   *          This file contains the system clock configuration for STM32F0xx devices,
//    9   *          and is generated by the clock configuration tool
//   10   *          STM32F0xx_Clock_Configuration_V1.0.0.xls
//   11   *
//   12   * 1.  This file provides two functions and one global variable to be called from
//   13   *     user application:
//   14   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
//   15   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
//   16   *                      depending on the configuration made in the clock xls tool.
//   17   *                      This function is called at startup just after reset and
//   18   *                      before branch to main program. This call is made inside
//   19   *                      the "startup_stm32f0xx.s" file.
//   20   *
//   21   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
//   22   *                                  by the user application to setup the SysTick
//   23   *                                  timer or configure other parameters.
//   24   *
//   25   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
//   26   *                                 be called whenever the core clock is changed
//   27   *                                 during program execution.
//   28   *
//   29   * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
//   30   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
//   31   *    configure the system clock before to branch to main program.
//   32   *
//   33   * 3. If the system clock source selected by user fails to startup, the SystemInit()
//   34   *    function will do nothing and HSI still used as system clock source. User can
//   35   *    add some code to deal with this issue inside the SetSysClock() function.
//   36   *
//   37   * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
//   38   *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
//   39   *    through PLL, and you are using different crystal you have to adapt the HSE
//   40   *    value to your own configuration.
//   41   *
//   42   * 5. This file configures the system clock as follows:
//   43   *=============================================================================
//   44   *                         System Clock Configuration
//   45   *=============================================================================
//   46   *        System Clock source          | PLL(HSE)
//   47   *-----------------------------------------------------------------------------
//   48   *        SYSCLK                       | 48000000 Hz
//   49   *-----------------------------------------------------------------------------
//   50   *        HCLK                         | 48000000 Hz
//   51   *-----------------------------------------------------------------------------
//   52   *        AHB Prescaler                | 1
//   53   *-----------------------------------------------------------------------------
//   54   *        APB1 Prescaler               | 1
//   55   *-----------------------------------------------------------------------------
//   56   *        APB2 Prescaler               | 1
//   57   *-----------------------------------------------------------------------------
//   58   *        HSE Frequency                | 8000000 Hz
//   59   *-----------------------------------------------------------------------------
//   60   *        PLL MUL                      | 6
//   61   *-----------------------------------------------------------------------------
//   62   *        VDD                          | 3.3 V
//   63   *-----------------------------------------------------------------------------
//   64   *        Flash Latency                | 1 WS
//   65   *-----------------------------------------------------------------------------
//   66   *=============================================================================
//   67   ******************************************************************************
//   68   * @attention
//   69   *
//   70   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
//   71   *
//   72   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
//   73   * You may not use this file except in compliance with the License.
//   74   * You may obtain a copy of the License at:
//   75   *
//   76   *        http://www.st.com/software_license_agreement_liberty_v2
//   77   *
//   78   * Unless required by applicable law or agreed to in writing, software
//   79   * distributed under the License is distributed on an "AS IS" BASIS,
//   80   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   81   * See the License for the specific language governing permissions and
//   82   * limitations under the License.
//   83   *
//   84   ******************************************************************************
//   85   */
//   86 
//   87 
//   88 #include "stm32f0xx.h"
//   89 
//   90 static void SetSysClock()
//   91 {
//   92   __IO uint32_t StartUpCounter = 0;
//   93 
//   94   /* Enable Prefetch Buffer and set Flash Latency */
//   95   FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
//   96 
//   97   /* HCLK = SYSCLK/1 */
//   98   RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
//   99 
//  100   /* PCLK = HCLK/1 */
//  101   RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
//  102 
//  103   /* PLL configuration = 12 * HSI/2 = 48 MHz */
//  104   RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
//  105   RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL12);
//  106 
//  107   /* Enable PLL */
//  108   RCC->CR |= RCC_CR_PLLON;
//  109 
//  110   /* Wait till PLL is ready */
//  111   while((RCC->CR & RCC_CR_PLLRDY) == 0)
//  112   {
//  113   }
//  114 
//  115   /* Select PLL as system clock source */
//  116   RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
//  117   RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
//  118 
//  119   /* Wait till PLL is used as system clock source */
//  120   while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
//  121   {
//  122   }
//  123 }
//  124 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  125 void SystemInit()
//  126 {
SystemInit:
        SUB      SP,SP,#+8
//  127   #ifdef DEBUG
//  128     return;
//  129   #endif
//  130 
//  131   /* Set HSION bit */
//  132   RCC->CR |= (uint32_t)0x00000001;
        LDR      R0,??SystemInit_0  ;; 0x40021000
        LDR      R1,[R0, #+0]
        MOVS     R2,#+1
        ORRS     R2,R2,R1
        STR      R2,[R0, #+0]
//  133 
//  134 #if defined(STM32F051)
//  135   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
//  136   RCC->CFGR &= (uint32_t)0xF8FFB80C;
        LDR      R1,[R0, #+4]
        LDR      R2,??SystemInit_0+0x4  ;; 0xf8ffb80c
        ANDS     R2,R2,R1
        STR      R2,[R0, #+4]
//  137 #else
//  138   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
//  139   RCC->CFGR &= (uint32_t)0x08FFB80C;
//  140 #endif /* STM32F051 */
//  141 
//  142   /* Reset HSEON, CSSON and PLLON bits */
//  143   RCC->CR &= (uint32_t)0xFEF6FFFF;
        LDR      R1,[R0, #+0]
        LDR      R2,??SystemInit_0+0x8  ;; 0xfef6ffff
        ANDS     R2,R2,R1
        STR      R2,[R0, #+0]
//  144 
//  145   /* Reset HSEBYP bit */
//  146   RCC->CR &= (uint32_t)0xFFFBFFFF;
        LDR      R1,[R0, #+0]
        LDR      R2,??SystemInit_0+0xC  ;; 0xfffbffff
        ANDS     R2,R2,R1
        STR      R2,[R0, #+0]
//  147 
//  148   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
//  149   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
        LDR      R1,[R0, #+4]
        LDR      R2,??SystemInit_0+0x10  ;; 0xffc0ffff
        ANDS     R2,R2,R1
        STR      R2,[R0, #+4]
//  150 
//  151   /* Reset PREDIV1[3:0] bits */
//  152   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
        LDR      R1,[R0, #+44]
        MOVS     R2,#+15
        BICS     R1,R1,R2
        STR      R1,[R0, #+44]
//  153 
//  154   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
//  155   RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
        LDR      R1,[R0, #+48]
        LDR      R2,??SystemInit_0+0x14  ;; 0xfffffeac
        ANDS     R2,R2,R1
        STR      R2,[R0, #+48]
//  156 
//  157   /* Reset HSI14 bit */
//  158   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
        LDR      R1,[R0, #+52]
        MOVS     R2,#+1
        BICS     R1,R1,R2
        STR      R1,[R0, #+52]
//  159 
//  160   /* Disable all interrupts */
//  161   RCC->CIR = 0x00000000;
        MOVS     R1,#+0
        STR      R1,[R0, #+8]
//  162 
//  163   /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
//  164   SetSysClock();
        STR      R1,[SP, #+0]
        LDR      R1,??SystemInit_0+0x18  ;; 0x40022000
        MOVS     R2,#+17
        STR      R2,[R1, #+0]
        LDR      R1,[R0, #+4]
        STR      R1,[R0, #+4]
        LDR      R1,[R0, #+4]
        STR      R1,[R0, #+4]
        LDR      R1,[R0, #+4]
        LDR      R2,??SystemInit_0+0x1C  ;; 0xffc07fff
        ANDS     R2,R2,R1
        STR      R2,[R0, #+4]
        LDR      R1,[R0, #+4]
        MOVS     R2,#+160
        LSLS     R2,R2,#+14       ;; #+2621440
        ORRS     R2,R2,R1
        STR      R2,[R0, #+4]
        LDR      R1,[R0, #+0]
        MOVS     R2,#+128
        LSLS     R2,R2,#+17       ;; #+16777216
        ORRS     R2,R2,R1
        STR      R2,[R0, #+0]
        MOVS     R1,#+128
        LSLS     R1,R1,#+18       ;; #+33554432
??SystemInit_1:
        LDR      R2,[R0, #+0]
        ANDS     R2,R2,R1
        BEQ      ??SystemInit_1
        LDR      R1,[R0, #+4]
        MOVS     R2,#+3
        BICS     R1,R1,R2
        STR      R1,[R0, #+4]
        LDR      R1,[R0, #+4]
        MOVS     R2,#+2
        ORRS     R2,R2,R1
        STR      R2,[R0, #+4]
        MOVS     R1,#+12
??SystemInit_2:
        LDR      R2,[R0, #+4]
        ANDS     R2,R2,R1
        CMP      R2,#+8
        BNE      ??SystemInit_2
//  165 }
        ADD      SP,SP,#+8
        BX       LR               ;; return
        DATA
??SystemInit_0:
        DC32     0x40021000
        DC32     0xf8ffb80c
        DC32     0xfef6ffff
        DC32     0xfffbffff
        DC32     0xffc0ffff
        DC32     0xfffffeac
        DC32     0x40022000
        DC32     0xffc07fff

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  166 
//  167 
//  168 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
// 
// 188 bytes in section .text
// 
// 188 bytes of CODE memory
//
//Errors: none
//Warnings: none
